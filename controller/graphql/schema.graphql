interface Node {
  id: ID!
}

type KVPair {
  key: String!

  value: String!
}

type DeploymentConfig {
  strategy: String!

  timeout: Int!
}

type App implements Node {
  id: ID!

  # The name of the app.
  name: String!

  meta(keys: [String!]): [KVPair]!

  deploymentConfig: DeploymentConfig!

  currentRelease: Release

  createdAt: DateTime!

  updatedAt: DateTime!
}

type Release implements Node {
  id: ID!

  artifacts: [Artifact!]!

  env(keys: [String!]): [KVPair]!

  meta(keys: [String!]): [KVPair]!

  processTypes(names: [String!]): [ProcessType]!

  createdAt: DateTime!
}

type ProcessType {
  name: String!

  args: [String!]!

  env(keys: [String!]): [KVPair]!

  ports: [ProcessPort!]!

  data: Boolean!

  omni: Boolean!

  hostNetwork: Boolean!

  serviceName: String

  resurrect: Boolean!

  resources(types: [ResourceType!]): [ResourceSpec]!
}

type ProcessPort {
  port: Int!

  proto: String!

  service: HostService
}

type HostService {
  name: String!

  create: Boolean!

  check: HealthCheck
}

enum HealthCheckType {
  TCP
  HTTP
  HTTPS
}

type HealthCheck {
  type: HealthCheckType!

  interval: Int!

  threshold: Int!

  killDown: Boolean!

  startTimeout: Int!

  path: String

  host: String

  match: String

  status: Int
}


enum ResourceType {
  MEMORY
  CPU
  MAX_FD
  MAX_PROCS
}

type ResourceSpec {
  type: ResourceType!

  request: Int

  limit: Int
}

type Artifact implements Node {
  id: ID!

  type: ArtifactType!

  uri: URI!

  meta(keys: [String!]): [KVPair]!

  createdAt: DateTime!
}

type Formation implements Node {
  id: ID!

  app: App!

  release: Release!

  processes(names: [String!]): [FormationProcess]!

  createdAt: DateTime!

  updatedAt: DateTime!
}

type FormationProcess {
  count: Int!

  processType: ProcessType!

  tags(keys: [String!]): [KVPair]!
}

type Job implements Node {
  id: ID!

  uuid: String!

  hostId: String!

  app: App!

  release: Release!

  processType: ProcessType!

  state: JobState!

  args: [String!]!

  meta(keys: [String!]): [KVPair]!

  exitStatus: Int

  hostError: String

  runAt: DateTime

  restarts: Int

  createdAt: DateTime!

  updatedAt: DateTime!
}

enum JobState {
  PENDING
  STARTING
  UP
  STOPPING
  DOWN
}

type Deployment implements Node {
  id: ID!

  app: App!

  oldRelease: Release!

  newRelease: Release!

  strategy: String!

  status: String!

  processes(names: [String!]): [DeploymentProcess]!

  deployTimeout: Int!

  createdAt: DateTime!

  finishedAt: DateTime
}

type DeploymentProcess {
  count: Int!

  processType: ProcessType!
}

type DeploymentEvent {
  app: App!

  deployment: Deployment!

  release: Release!

  status: String!

  jobType: String!

  jobState: JobState!

  error: String
}

type ResourceProvider implements Node {
  id: ID!

  url: URI!

  name: String!

  createdAt: DateTime!

  updatedAt: DateTime!
}

type Resource implements Node {
  id: ID!

  provider: ResourceProvider!

  externalId: String!

  env(keys: [String!]): [KVPair]!

  apps(ids: [ID!]): [App]!

  createdAt: DateTime!
}
